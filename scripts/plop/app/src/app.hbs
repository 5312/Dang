// 运行时配置
import { RunTimeLayoutConfig } from '@umijs/max';
import type { RequestConfig } from '@umijs/max';
import { message, notification } from 'antd';

// 全局初始化数据配置，用于 Layout 用户信息和权限初始化
// 更多信息见文档：https://next.umijs.org/docs/api/runtime-config#getinitialstate
export async function getInitialState(): Promise<{ name: string }> {
  return { name: '@Dang-admin' };
}

export const layout: RunTimeLayoutConfig = () => {
  return {
    layout: 'mix',
    // logo: 'https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg',
    menu: {
      locale: false,
      params: {
        // userId: initialState?.currentUser?.userid,
      },
      // request: async (params, defaultMenuData) => {
      //   // initialState.currentUser 中包含了所有用户信息
      //   const menuData = await fetchMenuData();
      //   return menuData;
      // },
    },
    // locale: false, // 默认开启，如无需菜单国际化可关闭
  };
};

// 错误处理方案： 错误类型
enum ErrorShowType {
  SILENT = 0, // silent
  WARN_MESSAGE = 1,
  ERROR_MESSAGE = 2,
  NOTIFICATION = 3,
  REDIRECT = 9, // redirect
}
// 与后端约定的响应数据格式
interface ResponseStructure {
  data: any;
  errorCode?: number;
  errorMessage?: string;
  showType?: ErrorShowType;
}

const BASEURL = ''; //'http://localhost:86';

export const request: RequestConfig = {
  timeout: 1000,
  headers: { 'X-Requested-With': 'XMLHttpRequest' },
  withCredentials: true,
  //添加请求阶段的拦截器。
  requestInterceptors: [
    (url: string, options) => {
      let baseUrl = BASEURL + url;

      return { url: baseUrl, options };
    },
  ],
  // 添加响应阶段的拦截器。
  responseInterceptors: [
    (response: any) => {
      // 拦截响应数据，进行个性化处理
      const { data } = response;
      // console.log('请求成功', data);
      if (data.code !== 200) {
        message.error('请求失败！');
        message.error(data.msg);
      } /* else {
        message.success(data.msg);
      } */
      return response;
    },
  ],
};
